{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a54cc33a",
   "metadata": {},
   "source": [
    "### Advanced smoothing and interpolation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afcc26fa",
   "metadata": {},
   "source": [
    "Here, we perform different smoothing and interpolation operations on different body-parts and animals using the `simba.data_processors.interpolation_smoothing.AdvancedSmoother` and `simba.data_processors.interpolation_smoothing.AdvancedInterpolator`. \n",
    "\n",
    "See Example 1 for applying different smoothing and interpolation operations on different animals. \n",
    "\n",
    "See Example 2 for applying different smoothing and interpolation operations on different body-parts within animals. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2ca2623e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from simba.data_processors.interpolation_smoothing import AdvancedSmoother\n",
    "from simba.data_processors.interpolation_smoothing import AdvancedInterpolator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ae88cbba",
   "metadata": {},
   "outputs": [],
   "source": [
    "## EXAMPLE 1: DATA DEFINITIONS\n",
    "\n",
    "#The path to the SimBA project config\n",
    "CONFIG_PATH = '/Users/simon/Desktop/envs/troubleshooting/two_black_animals_14bp/project_folder/project_config.ini'\n",
    "\n",
    "#The path to the directory in a SimBA project that we want to interpolate and smooth  \n",
    "DATA_PATH = '/Users/simon/Desktop/envs/troubleshooting/two_black_animals_14bp/project_folder/csv/input_csv'\n",
    "\n",
    "# If we define each interpolation rule per \"animal\" or per \"body-part\". Here we specify one interpolation/smooting rule \n",
    "# per animal. If we want to specify different smoothing/interpolation rules per body-part, set TYPE = 'body-part' (see further examples below)\n",
    "TYPE = 'animal'\n",
    "\n",
    "# Dictionary defining the interpolation settings for the separate animals in the project. \n",
    "# Acceptable values: 'linear', 'quadratic', 'nearest'.\n",
    "# Note I: These interpolation settings will be applied on all body-parts belonging to specific animals. If you need to \n",
    "# apply different interpolation settings for different body-parts WITHIN animals, see further examples below.\n",
    "# Note II: To find the names of the animals in the project, check the project_config.ini file under the header [Multi animal IDs][id_list]\n",
    "INTERPOLATION_SETTINGS = {'Simon': 'linear', 'JJ': 'quadratic'}\n",
    "\n",
    "\n",
    "# Dictionary defining the smoothing settings for the separate animals in the project. \n",
    "# Acceptable methods: 'Savitzky Golay', 'Gaussian'.\n",
    "# Note I: These smoothing settings will be applied on all body-parts belonging to specific animals. If you need to \n",
    "# apply different smoothing settings for different body-parts WITHIN animals, see further examples below.\n",
    "# Note II: To find the names of the animals in the project, check the project_config.ini file under the header [Multi animal IDs][id_list]\n",
    "SMOOTHING_SETTINGS = {'Simon': {'method': 'Savitzky Golay', 'time_window': 2000},\n",
    "                       'JJ': {'method': 'Gaussian', 'time_window': 500}}\n",
    "\n",
    "#If the data in the ``DATA_PATH`` contains multi-index dataframes, set to True. E.g., set to True of input data is the ``project_folder/csv/input_csv`` directory.\n",
    "MULTI_INDEX_INPUT = True\n",
    "\n",
    "# If True, overwrites the input data. If False, then saves a copy input data in datetime-stamped sub-directory of the ``DATA_PATH`` folder.\n",
    "OVERWRITE = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "978c82e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Interpolating 9 Ear_left_1 body-parts in video Together_1...\n",
      "Interpolating 2 Ear_right_1 body-parts in video Together_1...\n",
      "Interpolating 7 Nose_1 body-parts in video Together_1...\n",
      "Interpolating 0 Center_1 body-parts in video Together_1...\n",
      "Interpolating 2 Lat_left_1 body-parts in video Together_1...\n",
      "Interpolating 3 Lat_right_1 body-parts in video Together_1...\n",
      "Interpolating 3 Tail_base_1 body-parts in video Together_1...\n",
      "Interpolating 0 Tail_end_1 body-parts in video Together_1...\n",
      "Interpolating 0 Ear_left_2 body-parts in video Together_1...\n",
      "Interpolating 0 Ear_right_2 body-parts in video Together_1...\n",
      "Interpolating 0 Nose_2 body-parts in video Together_1...\n",
      "Interpolating 0 Center_2 body-parts in video Together_1...\n",
      "Interpolating 0 Lat_left_2 body-parts in video Together_1...\n",
      "Interpolating 2 Lat_right_2 body-parts in video Together_1...\n",
      "Interpolating 2 Tail_base_2 body-parts in video Together_1...\n",
      "Interpolating 0 Tail_end_2 body-parts in video Together_1...\n",
      "SIMBA COMPLETE: Interpolation complete! (elapsed time: 0.4584s) \tcomplete\n"
     ]
    }
   ],
   "source": [
    "# RUN INTERPOLATOR EXAMPLE 1\n",
    "interpolator = AdvancedInterpolator(data_dir=DATA_PATH,\n",
    "                                    config_path=CONFIG_PATH,\n",
    "                                    type=TYPE,\n",
    "                                    settings=INTERPOLATION_SETTINGS, \n",
    "                                    initial_import_multi_index=MULTI_INDEX_INPUT,\n",
    "                                    overwrite=OVERWRITE)\n",
    "interpolator.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e0acbb54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Smoothing data in video Together_1...\n",
      "SIMBA COMPLETE: Smoothing complete complete! (elapsed time: 0.4014s) \tcomplete\n"
     ]
    }
   ],
   "source": [
    "# RUN SMOOTHING EXAMPLE 1\n",
    "smoother = AdvancedSmoother(data_dir=DATA_PATH,\n",
    "                            config_path=CONFIG_PATH,\n",
    "                            type=TYPE,\n",
    "                            settings=SMOOTHING_SETTINGS,\n",
    "                            initial_import_multi_index=True,\n",
    "                            overwrite=OVERWRITE)\n",
    "smoother.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bfcf89a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# EXAMPLE 2: IF WE INSTEAD WANT TO APPLY SMOOTHING AND INTERPOLATION RULED ON A BODYPART-BY-BODY-PART BASES, WE RE-DEFINE \"TYPE\" AND \n",
    "# OUR INTERPOLATION AND SMOOTHING SETTINGS\n",
    "\n",
    "TYPE = 'body-part'\n",
    "\n",
    "# Note: To find the names of the body-parts in your SimBA project, see the `project_folder/logs/measures/pose_configs/bp_names/project_bp_names.csv` file in your SimBa project\n",
    "INTERPOLATION_SETTINGS = {'Simon': {'Ear_left_1': 'nearest', 'Ear_right_1': 'linear', 'Nose_1': 'nearest', 'Lat_left_1': 'linear', 'Lat_right_1': 'linear', 'Center_1': 'nearest', 'Tail_base_1': 'quadratic'},\n",
    "                          'JJ': {'Ear_left_2': 'linear', 'Ear_right_2': 'nearest', 'Nose_2': 'quadratic', 'Lat_left_2': 'quadratic', 'Lat_right_2': 'linear', 'Center_2': 'quadratic', 'Tail_base_2': 'quadratic'}}\n",
    "\n",
    "\n",
    "SMOOTHING_SETTINGS = {'Simon': {'Ear_left_1': {'method': 'Savitzky Golay', 'time_window': 3500},\n",
    "                               'Ear_right_1': {'method': 'Gaussian', 'time_window': 500},\n",
    "                               'Nose_1': {'method': 'Savitzky Golay', 'time_window': 2000},\n",
    "                               'Lat_left_1': {'method': 'Savitzky Golay', 'time_window': 2000},\n",
    "                               'Lat_right_1': {'method': 'Gaussian', 'time_window': 2000},\n",
    "                               'Center_1': {'method': 'Savitzky Golay', 'time_window': 2000},\n",
    "                               'Tail_base_1': {'method': 'Gaussian', 'time_window': 500}},\n",
    "                        'JJ': {'Ear_left_2': {'method': 'Savitzky Golay', 'time_window': 2000},\n",
    "                               'Ear_right_2': {'method': 'Savitzky Golay', 'time_window': 500},\n",
    "                               'Nose_2': {'method': 'Gaussian', 'time_window': 3500},\n",
    "                               'Lat_left_2': {'method': 'Savitzky Golay', 'time_window': 500},\n",
    "                               'Lat_right_2': {'method': 'Gaussian', 'time_window': 3500},\n",
    "                               'Center_2': {'method': 'Gaussian', 'time_window': 2000},\n",
    "                               'Tail_base_2': {'method': 'Savitzky Golay', 'time_window': 3500}}}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f674a485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Interpolating 9 Ear_left_1 body-parts in video Together_1...\n",
      "Interpolating 2 Ear_right_1 body-parts in video Together_1...\n",
      "Interpolating 7 Nose_1 body-parts in video Together_1...\n",
      "Interpolating 2 Lat_left_1 body-parts in video Together_1...\n",
      "Interpolating 3 Lat_right_1 body-parts in video Together_1...\n",
      "Interpolating 0 Center_1 body-parts in video Together_1...\n",
      "Interpolating 3 Tail_base_1 body-parts in video Together_1...\n",
      "Interpolating 0 Ear_left_2 body-parts in video Together_1...\n",
      "Interpolating 0 Ear_right_2 body-parts in video Together_1...\n",
      "Interpolating 0 Nose_2 body-parts in video Together_1...\n",
      "Interpolating 0 Lat_left_2 body-parts in video Together_1...\n",
      "Interpolating 2 Lat_right_2 body-parts in video Together_1...\n",
      "Interpolating 0 Center_2 body-parts in video Together_1...\n",
      "Interpolating 2 Tail_base_2 body-parts in video Together_1...\n",
      "SIMBA COMPLETE: Interpolation complete! (elapsed time: 0.5042s) \tcomplete\n"
     ]
    }
   ],
   "source": [
    "# RUN INTERPOLATOR EXAMPLE 2\n",
    "interpolator = AdvancedInterpolator(data_dir=DATA_PATH,\n",
    "                                    config_path=CONFIG_PATH,\n",
    "                                    type=TYPE,\n",
    "                                    settings=INTERPOLATION_SETTINGS, \n",
    "                                    initial_import_multi_index=MULTI_INDEX_INPUT,\n",
    "                                    overwrite=OVERWRITE)\n",
    "interpolator.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "90162e11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Smoothing data in video Together_1...\n",
      "SIMBA COMPLETE: Smoothing complete complete! (elapsed time: 0.3942s) \tcomplete\n"
     ]
    }
   ],
   "source": [
    "# RUN SMOOTHING EXAMPLE 2\n",
    "smoother = AdvancedSmoother(data_dir=DATA_PATH,\n",
    "                            config_path=CONFIG_PATH,\n",
    "                            type=TYPE,\n",
    "                            settings=SMOOTHING_SETTINGS,\n",
    "                            initial_import_multi_index=True,\n",
    "                            overwrite=OVERWRITE)\n",
    "smoother.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c22149b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:Python_3.6]",
   "language": "python",
   "name": "conda-env-Python_3.6-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
